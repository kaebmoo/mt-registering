# email_service.py
import smtplib
import ssl
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.header import Header
from email.utils import formataddr
import os
import logging
import traceback

logger = logging.getLogger(__name__)

class EmailService:
    """Email service using SMTP SSL"""
    
    def __init__(self):
        self.smtp_server = os.environ.get('MAIL_SERVER', 'smtp.gmail.com')
        self.port = int(os.environ.get('MAIL_PORT', 465))
        
        # ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏ï‡∏£‡∏¥‡∏á‡∏ß‡πà‡∏≤‡∏á '' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô str ‡πÄ‡∏™‡∏°‡∏≠
        self.sender_email = os.environ.get('MAIL_USERNAME', '')
        self.sender_password = os.environ.get('MAIL_PASSWORD', '')
        self.sender_name = os.environ.get('MAIL_FROM_NAME', 'Meeting Registration System')
        self.sender_from_address = os.environ.get('MAIL_FROM', self.sender_email)

        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if not self.sender_email or not self.sender_password:
            logger.critical("CRITICAL: MAIL_USERNAME and MAIL_PASSWORD must be set in environment variables.")
        
    def send_otp_email(self, recipient_email: str, recipient_name: str, otp: str, purpose: str = 'login'):
        """Send OTP email with proper encoding"""
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤ config ‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á
        if not self.sender_email or not self.sender_password:
            logger.error("Cannot send email because sender credentials are not configured.")
            return False

        try:
            message = MIMEMultipart('alternative')
            
            if purpose == 'register':
                subject = "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô Email - ‡∏£‡∏∞‡∏ö‡∏ö‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°"
            else:
                subject = "‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö - ‡∏£‡∏´‡∏±‡∏™ OTP"
            
            # ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÅ‡∏õ‡∏•‡∏á Header object ‡πÄ‡∏õ‡πá‡∏ô string ‡∏î‡πâ‡∏ß‡∏¢ str() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ Type Checker ‡∏û‡∏≠‡πÉ‡∏à
            message["Subject"] = str(Header(subject, 'utf-8'))
            
            # ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á .encode() ‡∏ó‡∏µ‡πà Header ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ formataddr ‡∏à‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡πÄ‡∏≠‡∏á
            # ‡πÅ‡∏•‡∏∞‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à‡πÅ‡∏•‡πâ‡∏ß‡∏ß‡πà‡∏≤ self.sender_email ‡πÄ‡∏õ‡πá‡∏ô str
            message["From"] = formataddr((self.sender_name, self.sender_from_address))
            message["To"] = formataddr((recipient_name or recipient_email, recipient_email))
            
            # Plain text version
            text_content = f"""
‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ {recipient_name or '‡∏Ñ‡∏∏‡∏ì'},

‡∏£‡∏´‡∏±‡∏™ OTP ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠: {otp}

‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô 10 ‡∏ô‡∏≤‡∏ó‡∏µ
‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡πÅ‡∏ä‡∏£‡πå‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏µ‡πâ‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏≠‡∏∑‡πà‡∏ô

‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì,
‡∏£‡∏∞‡∏ö‡∏ö‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°
            """
            
            # HTML version
            html_content = f"""
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <style>
        body {{ font-family: 'Sarabun', Arial, sans-serif; }}
        .container {{ max-width: 600px; margin: 0 auto; padding: 20px; }}
        .header {{ background-color: #2185d0; color: white; padding: 20px; text-align: center; border-radius: 5px; }}
        .content {{ padding: 20px; background-color: #f9f9f9; }}
        .otp-code {{ 
            font-size: 32px; 
            font-weight: bold; 
            color: #2185d0; 
            text-align: center; 
            padding: 20px;
            background-color: white;
            border: 2px dashed #2185d0;
            margin: 20px 0;
            letter-spacing: 5px;
            border-radius: 5px;
        }}
        .footer {{ text-align: center; padding: 10px; color: #666; font-size: 12px; }}
        .warning {{ color: #ff6b6b; font-weight: bold; }}
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h2>{'‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô Email' if purpose == 'register' else '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö'}</h2>
        </div>
        <div class="content">
            <p>‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ <strong>{recipient_name or '‡∏Ñ‡∏∏‡∏ì'}</strong>,</p>
            <p>‡∏£‡∏´‡∏±‡∏™ OTP ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠:</p>
            <div class="otp-code">{otp}</div>
            <p>‚è±Ô∏è <span class="warning">‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô 10 ‡∏ô‡∏≤‡∏ó‡∏µ</span></p>
            <p>üîí ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡πÅ‡∏ä‡∏£‡πå‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏µ‡πâ‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏≠‡∏∑‡πà‡∏ô</p>
        </div>
        <div class="footer">
            <p>‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£<br>‡∏£‡∏∞‡∏ö‡∏ö‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°</p>
            <p>‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏™‡πà‡∏á‡∏ñ‡∏∂‡∏á: {recipient_email}</p>
        </div>
    </div>
</body>
</html>
            """
            
            part1 = MIMEText(text_content, 'plain', 'utf-8')
            part2 = MIMEText(html_content, 'html', 'utf-8')
            
            message.attach(part1)
            message.attach(part2)
            
            context = ssl.create_default_context()
            
            with smtplib.SMTP_SSL(self.smtp_server, self.port, context=context) as server:
                server.login(self.sender_email, self.sender_password)
                server.send_message(message)
                
            logger.info(f"‚úÖ OTP email sent to: {recipient_email}")
            return True
            
        except smtplib.SMTPAuthenticationError as e:
            logger.error(f"‚ùå SMTP Authentication failed. Check MAIL_USERNAME and MAIL_PASSWORD. Error: {str(e)}")
            return False
        except smtplib.SMTPException as e:
            logger.error(f"‚ùå SMTP error for {recipient_email}: {str(e)}")
            return False
        except Exception as e:
            logger.error(f"‚ùå Failed to send email to {recipient_email}: {str(e)}")
            logger.error(f"Error type: {type(e).__name__}")
            logger.error(f"Traceback: {traceback.format_exc()}")
            return False

    def test_connection(self):
        """Test SMTP connection"""
        if not self.sender_email or not self.sender_password:
            logger.error("Cannot test connection because sender credentials are not configured.")
            return False
            
        try:
            context = ssl.create_default_context()
            with smtplib.SMTP_SSL(self.smtp_server, self.port, context=context) as server:
                server.ehlo()
                server.login(self.sender_email, self.sender_password)
                logger.info("‚úÖ SMTP connection successful")
                return True
        except Exception as e:
            logger.error(f"‚ùå SMTP connection failed: {str(e)}")
            return False